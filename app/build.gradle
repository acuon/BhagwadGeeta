plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
}

android {
    namespace 'com.example.bhagwadgeeta'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.bhagwadgeeta"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "BASE_URL", "\"" + getBaseUrl() + "\""
        buildConfigField "String", "API_KEY", "\"" + getApiKey() + "\""
        buildConfigField "String", "API_HOST", "\"" + getApiHost() + "\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        buildConfig true
        dataBinding true
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "javax.inject:javax.inject:1"


    // Room Database
    implementation "androidx.room:room-runtime:2.5.2"
    kapt "androidx.room:room-compiler:2.5.2"
    // Android Room Database (if needed)
    implementation "androidx.room:room-ktx:2.5.2"

    // Gson (for JSON parsing with Retrofit)
    implementation "com.google.code.gson:gson:2.8.9"

    // WorkManager library
    implementation "androidx.work:work-runtime:2.8.1"

    // Coroutine dependencies
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1"
    implementation 'androidx.work:work-runtime-ktx:2.8.1'

    // Android ViewModel and LiveData (if needed)
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.6.1"

    // Retrofit for API Requests
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'

    // Hilt (Dagger Hilt for Dependency Injection)
    implementation "com.google.dagger:hilt-android:2.38.1"
//    kapt "com.google.dagger:hilt-android-compiler:2.38.1"

    kapt 'com.google.dagger:hilt-android-compiler:2.38.1'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'
    implementation "androidx.activity:activity-ktx:1.4.0"


    implementation 'androidx.hilt:hilt-work:1.0.0'
    // When using Kotlin.
    kapt 'androidx.hilt:hilt-compiler:1.0.0'

    implementation "androidx.startup:startup-runtime:1.1.1"

    def nav_version = "2.3.0"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"

    implementation "com.squareup.okhttp3:okhttp:4.2.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.2.0"

}
static def getBaseUrl() {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('local.properties')))
    return props['BASE_URL']
}

static def getApiKey() {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('local.properties')))
    return props['API_KEY']
}

static def getApiHost() {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('local.properties')))
    return props['API_HOST']
}